import Head from 'next/head'
import { Layout } from '@dae/ui'
import {
  Stack,
  Tabs,
  TabList,
  Tab,
  Link,
  Flex,
  Avatar,
  Text,
  VStack,
} from '@chakra-ui/react'
import NextLink from 'next/link'
import { useRouter } from 'next/router'
import { GetServerSideProps } from 'next'
import { getCourseStudents } from '../../../../lib/api'

export default function StudentsList({ students }: any) {
  const router = useRouter()
  const address = router.query.address as string | undefined

  return (
    <>
      <Head>
        <title>Students List</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Layout.Course heading='Students List'>
        <Stack spacing={8}>
          <Tabs defaultIndex={0}>
            <TabList>
              <Tab>Students List</Tab>
              <Link
                as={NextLink}
                href={`/course/${address}/students/enroll`}
                style={{ textDecoration: 'none' }}
              >
                <Tab>Enroll New Students</Tab>
              </Link>
            </TabList>
          </Tabs>
          <VStack spacing={2} align={'stretch'}>
            {students.map((student: any) => {
              return (
                <Flex
                  key={student.studentAddress}
                  border={'1px'}
                  borderColor={'gray.300'}
                  rounded={'lg'}
                  paddingY={2}
                  paddingX={3}
                  shadow={'0 0 1px rgba(0, 0, 0, 0.3)'}
                >
                  <Avatar src='' size={'sm'} />
                  <Flex ml='4' alignItems={'center'}>
                    <Text verticalAlign={'center'} fontSize='md'>
                      {student.studentAddress}
                    </Text>
                  </Flex>
                </Flex>
              )
            })}
          </VStack>
        </Stack>
      </Layout.Course>
    </>
  )
}

export const getServerSideProps: GetServerSideProps<{ students: any }> = async (
  context,
) => {
  const { address, chainId } = context.query as {
    address: string
    chainId: string
  }

  if (!address || !chainId) {
    return {
      redirect: {
        permanent: false,
        destination: '/',
      },
      props: {},
    }
  }

  try {
    const data = await getCourseStudents(address, parseInt(chainId))
    return {
      props: {
        students: data,
      },
    }
  } catch (_e) {
    return {
      notFound: true,
    }
  }
}
